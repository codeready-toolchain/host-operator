// Package templates Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/advanced.yml
// templates/basic.yml
// templates/template_bindata.go
package templates

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)
type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _advancedYml = []byte(`apiVersion: toolchain.dev.openshift.com/v1alpha1
kind: NSTemplateTier
metadata:
  name: advanced
spec:
  namespaces:
    - type: ide
      revision: abcdef
      template: >
        apiVersion: template.openshift.io/v1
        kind: Template
        metadata:
          labels:
            provider: codeready-toolchain
            version: ${COMMIT}
          name: advanced-ide
        objects:
        - apiVersion: v1
          kind: Namespace
          metadata:
            annotations:
              openshift.io/description: ${PROJECT_NAME}-ide
              openshift.io/display-name: ${PROJECT_NAME}-ide
              openshift.io/requester: ${USER_NAME}
            labels:
              provider: codeready-toolchain
              version: ${COMMIT}
            name: ${PROJECT_NAME}
        parameters:
        - name: PROJECT_NAME
          required: true
        - name: USER_NAME
          required: true
        - name: COMMIT
          required: true
    - type: cicd
      revision: 1d2f3q
      template: >
        apiVersion: template.openshift.io/v1
        kind: Template
        metadata:
          labels:
            provider: codeready-toolchain
            version: ${COMMIT}
          name: advanced-cicd
        objects:
        - apiVersion: v1
          kind: Namespace
          metadata:
            annotations:
              openshift.io/description: ${PROJECT_NAME}-cicd
              openshift.io/display-name: ${PROJECT_NAME}-cicd
              openshift.io/requester: ${USER_NAME}
            labels:
              provider: codeready-toolchain
              version: ${COMMIT}
            name: ${PROJECT_NAME}
        parameters:
        - name: PROJECT_NAME
          required: true
        - name: USER_NAME
          required: true
        - name: COMMIT
          required: true
    - type: stage
      revision: a34r57
      template: >
        apiVersion: template.openshift.io/v1
        kind: Template
        metadata:
          labels:
            provider: codeready-toolchain
            version: ${COMMIT}
          name: advanced-stage
        objects:
        - apiVersion: v1
          kind: Namespace
          metadata:
            annotations:
              openshift.io/description: ${PROJECT_NAME}-stage
              openshift.io/display-name: ${PROJECT_NAME}-stage
              openshift.io/requester: ${USER_NAME}
            labels:
              provider: codeready-toolchain
              version: ${COMMIT}
            name: ${PROJECT_NAME}
        parameters:
        - name: PROJECT_NAME
          required: true
        - name: USER_NAME
          required: true
        - name: COMMIT
          required: true
`)

func advancedYmlBytes() ([]byte, error) {
	return _advancedYml, nil
}

func advancedYml() (*asset, error) {
	bytes, err := advancedYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "advanced.yml", size: 2685, mode: os.FileMode(420), modTime: time.Unix(1568814714, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _basicYml = []byte(`apiVersion: toolchain.dev.openshift.com/v1alpha1
kind: NSTemplateTier
metadata:
  name: basic
spec:
  namespaces:
    - type: ide
      revision: abcdef
      template: >
        apiVersion: template.openshift.io/v1
        kind: Template
        metadata:
          labels:
            provider: codeready-toolchain
            version: ${COMMIT}
          name: basic-ide
        objects:
        - apiVersion: v1
          kind: Namespace
          metadata:
            annotations:
              openshift.io/description: ${PROJECT_NAME}-ide
              openshift.io/display-name: ${PROJECT_NAME}-ide
              openshift.io/requester: ${USER_NAME}
            labels:
              provider: codeready-toolchain
              version: ${COMMIT}
            name: ${PROJECT_NAME}
        parameters:
        - name: PROJECT_NAME
          required: true
        - name: USER_NAME
          required: true
        - name: COMMIT
          required: true
    - type: cicd
      revision: 1d2f3q
      template: >
        apiVersion: template.openshift.io/v1
        kind: Template
        metadata:
          labels:
            provider: codeready-toolchain
            version: ${COMMIT}
          name: basic-cicd
        objects:
        - apiVersion: v1
          kind: Namespace
          metadata:
            annotations:
              openshift.io/description: ${PROJECT_NAME}-cicd
              openshift.io/display-name: ${PROJECT_NAME}-cicd
              openshift.io/requester: ${USER_NAME}
            labels:
              provider: codeready-toolchain
              version: ${COMMIT}
            name: ${PROJECT_NAME}
        parameters:
        - name: PROJECT_NAME
          required: true
        - name: USER_NAME
          required: true
        - name: COMMIT
          required: true
    - type: stage
      revision: a34r57
      template: >
        apiVersion: template.openshift.io/v1
        kind: Template
        metadata:
          labels:
            provider: codeready-toolchain
            version: ${COMMIT}
          name: basic-stage
        objects:
        - apiVersion: v1
          kind: Namespace
          metadata:
            annotations:
              openshift.io/description: ${PROJECT_NAME}-stage
              openshift.io/display-name: ${PROJECT_NAME}-stage
              openshift.io/requester: ${USER_NAME}
            labels:
              provider: codeready-toolchain
              version: ${COMMIT}
            name: ${PROJECT_NAME}
        parameters:
        - name: PROJECT_NAME
          required: true
        - name: USER_NAME
          required: true
        - name: COMMIT
          required: true
`)

func basicYmlBytes() ([]byte, error) {
	return _basicYml, nil
}

func basicYml() (*asset, error) {
	bytes, err := basicYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "basic.yml", size: 2673, mode: os.FileMode(420), modTime: time.Unix(1568814695, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _template_bindataGo = []byte(`// Package templates Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/advanced.yml 
// templates/basic.yml
// templates/template_bindata.go
package templates

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)
type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _advancedYml = []byte(`+"`"+`apiVersion: toolchain.dev.openshift.com/v1alpha1
kind: NSTemplateTier
metadata:
  name: advanced
spec:
  namespaces:
    - type: ide
      revision: abcdef
      template: >
        apiVersion: template.openshift.io/v1
        kind: Template
        metadata:
          labels:
            provider: codeready-toolchain
            version: ${COMMIT}
          name: advanced-ide
        objects:
        - apiVersion: v1
          kind: Namespace
          metadata:
            annotations:
              openshift.io/description: ${PROJECT_NAME}-ide
              openshift.io/display-name: ${PROJECT_NAME}-ide
              openshift.io/requester: ${USER_NAME}
            labels:
              provider: codeready-toolchain
              version: ${COMMIT}
            name: ${PROJECT_NAME}
        parameters:
        - name: PROJECT_NAME
          required: true
        - name: USER_NAME
          required: true
        - name: COMMIT
          required: true
    - type: cicd
      revision: 1d2f3q
      template: >
        apiVersion: template.openshift.io/v1
        kind: Template
        metadata:
          labels:
            provider: codeready-toolchain
            version: ${COMMIT}
          name: advanced-cicd
        objects:
        - apiVersion: v1
          kind: Namespace
          metadata:
            annotations:
              openshift.io/description: ${PROJECT_NAME}-cicd
              openshift.io/display-name: ${PROJECT_NAME}-cicd
              openshift.io/requester: ${USER_NAME}
            labels:
              provider: codeready-toolchain
              version: ${COMMIT}
            name: ${PROJECT_NAME}
        parameters:
        - name: PROJECT_NAME
          required: true
        - name: USER_NAME
          required: true
        - name: COMMIT
          required: true
    - type: stage
      revision: a34r57
      template: >
        apiVersion: template.openshift.io/v1
        kind: Template
        metadata:
          labels:
            provider: codeready-toolchain
            version: ${COMMIT}
          name: advanced-stage
        objects:
        - apiVersion: v1
          kind: Namespace
          metadata:
            annotations:
              openshift.io/description: ${PROJECT_NAME}-stage
              openshift.io/display-name: ${PROJECT_NAME}-stage
              openshift.io/requester: ${USER_NAME}
            labels:
              provider: codeready-toolchain
              version: ${COMMIT}
            name: ${PROJECT_NAME}
        parameters:
        - name: PROJECT_NAME
          required: true
        - name: USER_NAME
          required: true
        - name: COMMIT
          required: true
`+"`"+`)

func advancedYmlBytes() ([]byte, error) {
	return _advancedYml, nil
}

func advancedYml() (*asset, error) {
	bytes, err := advancedYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "advanced.yml", size: 2685, mode: os.FileMode(420), modTime: time.Unix(1568814714, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _basicYml = []byte(`+"`"+`a`)

func template_bindataGoBytes() ([]byte, error) {
	return _template_bindataGo, nil
}

func template_bindataGo() (*asset, error) {
	bytes, err := template_bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template_bindata.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1568815302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"advanced.yml":        advancedYml,
	"basic.yml":           basicYml,
	"template_bindata.go": template_bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"advanced.yml":        &bintree{advancedYml, map[string]*bintree{}},
	"basic.yml":           &bintree{basicYml, map[string]*bintree{}},
	"template_bindata.go": &bintree{template_bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
