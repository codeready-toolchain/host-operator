apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: base-dev
objects:
- apiVersion: v1
  kind: Namespace
  metadata:
    annotations:
      openshift.io/description: ${USERNAME}-dev
      openshift.io/display-name: ${USERNAME}-dev
      openshift.io/requester: ${USERNAME}
    labels:
      name: ${USERNAME}-dev
      # For RHODS: Allow user namespace to be treated as a DSP to enable Model Serving on this NS
      modelmesh-enabled: "true" 
      opendatahub.io/dashboard: "true"
    name: ${USERNAME}-dev

# Role and RoleBindings for CRT administration (not associated with users)
- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    name: exec-pods
    namespace: ${USERNAME}-dev
  rules:
  - apiGroups:
    - ""
    resources:
    - pods/exec
    verbs:
    - get
    - list
    - watch
    - create
    - delete
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: crtadmin-view
    namespace: ${USERNAME}-dev
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: view
  subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: crtadmin-users-view
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: crtadmin-pods
    namespace: ${USERNAME}-dev
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: exec-pods
  subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: crtadmin-users-view

- apiVersion: v1
  kind: LimitRange
  metadata:
    name: resource-limits
    namespace: ${USERNAME}-dev
  spec:
    limits:
    - type: "Container"
      default:
        cpu: 1000m
        memory: 750Mi
      defaultRequest:
        cpu: 10m
        memory: 64Mi
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    name: allow-same-namespace
    namespace: ${USERNAME}-dev
  spec:
    podSelector: {}
    ingress:
    - from:
      - podSelector: {}
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    name: allow-from-openshift-ingress
    namespace: ${USERNAME}-dev
  spec:
    ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            network.openshift.io/policy-group: ingress
    podSelector: {}
    policyTypes:
    - Ingress
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    name: allow-from-openshift-monitoring
    namespace: ${USERNAME}-dev
  spec:
    ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            network.openshift.io/policy-group: monitoring
    podSelector: {}
    policyTypes:
    - Ingress
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    name: allow-from-other-user-namespaces
    namespace: ${USERNAME}-dev
  spec:
    ingress:
      - from:
        - namespaceSelector:
            matchLabels:
              name: ${USERNAME}-stage
    podSelector: {}
    policyTypes:
      - Ingress
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    name: allow-from-codeready-workspaces-operator
    namespace: ${USERNAME}-dev
  spec:
    ingress:
      - from:
        - namespaceSelector:
            matchLabels:
              network.openshift.io/policy-group: codeready-workspaces
    podSelector: {}
    policyTypes:
      - Ingress
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    name: allow-from-olm-namespaces
    namespace: ${USERNAME}-dev
  spec:
    ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            openshift.io/scc: anyuid
    podSelector: {}
    policyTypes:
    - Ingress
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    name: allow-from-console-namespaces
    namespace: ${USERNAME}-dev
  spec:
    ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            network.openshift.io/policy-group: console
    podSelector: {}
    policyTypes:
    - Ingress
parameters:
- name: USERNAME
  required: true